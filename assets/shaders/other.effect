// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      # blendState:
      #   targets:
      #   - blend: true
      #     blendSrc: src_alpha
      #     blendDst: one_minus_src_alpha
      #     blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        renderType: {value: 1.5 }
        uSize: {value: [300,300] }
        WaveCentre: {value: [-0.5,-0.5,-1,-1] }
        

}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>
  in vec4 color;
  uniform block{
    vec4 WaveCentre;
    vec2 uSize;
    float renderType;

  };


  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 PencilSketch_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity) 
	{
	    vec2 offset = vec2(1.0 / Size);
	    vec3 weight = vec3(0.1125, 0.3154, 0.0721);
	    vec3 texColor = texture(Tex, UV).rgb;
	    vec2 stp0 = vec2(offset.x, 0.0);
	    vec2 st0p = vec2(0.0, offset.y);
	    vec2 stpp = vec2(offset.x, offset.y);
	    vec2 stpm = vec2(offset.x, -offset.y);
	    float i00 = dot(texColor, weight);
	    float im1m1 = dot(texture(Tex, UV - stpp).rgb, weight);
	    float ip1p1 = dot(texture(Tex, UV + stpp).rgb, weight);
	    float im1p1 = dot(texture(Tex, UV - stpm).rgb, weight);
	    float ip1m1 = dot(texture(Tex, UV + stpm).rgb, weight);
	    float im10 = dot(texture(Tex, UV - stp0).rgb, weight);
	    float ip10 = dot(texture(Tex, UV + stp0).rgb, weight);
	    float i0m1 = dot(texture(Tex, UV - st0p).rgb, weight);
	    float i0p1 = dot(texture(Tex, UV + st0p).rgb, weight);
	    float h = -im1p1 - 2.0 * i0p1 - ip1p1 + im1m1 + 2.0 * i0m1 + ip1m1;
	    float v = -im1m1 - 2.0 * im10 - im1p1 + ip1m1 + 2.0 * ip10 + ip1p1;
	    float mag = 1.0 - length(vec2(h, v));
	    vec3 target = vec3(mag);
	    return vec4(mix(texColor, target, Intensity), texture(Tex, UV).a);
	}

  //高斯模糊
  vec4 GaussianBlur_main(sampler2D Tex, vec2 UV, vec2 Size, float Intensity) 
	{
	    vec4 sum = vec4(0);
	    vec2 offset = vec2(0.0);
	    vec2 normalizedSize = vec2(1.0 / Size);
	    offset = normalizedSize * vec2(-2.0, -2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 1.0;
	    offset = normalizedSize * vec2(-1.0, -2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(0.0, -2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(1.0, -2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(2.0, -2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 1.0;
	    offset = normalizedSize * vec2(-2.0, -1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-1.0, -1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(0.0, -1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(1.0, -1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(2.0, -1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-2.0, 0.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(-1.0, 0.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(0.0, 0.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 41.0;
	    offset = normalizedSize * vec2(1.0, 0.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(2.0, 0.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(-2.0, 1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-1.0, 1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(0.0, 1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 26.0;
	    offset = normalizedSize * vec2(1.0, 1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 16.0;
	    offset = normalizedSize * vec2(2.0, 1.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(-2.0, 2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 1.0;
	    offset = normalizedSize * vec2(-1.0, 2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(0.0, 2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 7.0;
	    offset = normalizedSize * vec2(1.0, 2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 4.0;
	    offset = normalizedSize * vec2(2.0, 2.0) * Intensity;
	    sum += texture(Tex, UV + offset) * 1.0;               
	    return vec4((sum / 273.0).rgb, texture(Tex, UV).a);
	}

  //下雨
  vec3 N13(float p) 
	{
	   vec3 p3 = fract(vec3(p) * vec3(0.1031, 0.11369, 0.13787));
	   p3 += dot(p3, p3.yzx + 19.19);
	   return fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));
	}
	vec4 N14(float t) 
	{
	    return fract(sin(t*vec4(123.0, 1024.0, 1456.0, 264.0)) * vec4(6547.0, 345.0, 8799.0, 1564.0));
	}
	float N15(float t) 
	{
	    return fract(sin(t * 12345.564) * 7658.76);
	}
	float Saw(float b, float t) 
	{
	    return smoothstep(0.0, b, t) * smoothstep(1.0, b, t);
	}
	vec2 dropLayer(vec2 uv, float t) 
	{
	    vec2 UV = uv;    
	    // uv.y += t * 0.75;
      uv.y -= t;
	    vec2 a = vec2(6.0, 1.0);
	    vec2 grid = a *2.0;
	    vec2 id = floor(uv * grid);
	    float colShift = N15(id.x); 
	    // uv.y += colShift;
      uv.y -= colShift;

	    id = floor(uv * grid);
	    vec3 n = N13(id.x * 35.2 + id.y * 2376.1);
	    vec2 st = fract(uv * grid) - vec2(0.5, 0);
	    float x = n.x - 0.5;
	    float y = UV.y * 20.0;
	    float wiggle = sin(y + sin(y));
	    x += wiggle * (0.5 - abs(x)) * (n.z - 0.5);
	    x *= 0.7;
	    float ti = fract(t + n.z);
	    y = (Saw(0.85, ti) - 0.5) * 0.9 + 0.5;
	    vec2 p = vec2(x, y);
	    float d = length((st-p) * a.yx);
	    float mainDrop = smoothstep(0.4, 0.0, d);
	    float r = sqrt(smoothstep(1.0, y, st.y));
	    float cd = abs(st.x - x);
	    float trail = smoothstep(0.23 * r, 0.15 * r * r, cd);
	    float trailFront = smoothstep(-0.02, 0.02, st.y - y);
	    trail *= trailFront * r * r;
	    y = UV.y;
	    float trail2 = smoothstep(0.2 * r, 0.0, cd);
	    float droplets = max(0.0, (sin(y * (1.0 - y) * 120.0) - st.y)) * trail2 * trailFront * n.z;
	    y = fract(y * 10.0) + (st.y - 0.5);
      // y=1.0-y;
	    float dd = length(st - vec2(x, y));
	    droplets = smoothstep(0.3, 0.0, dd);
	    float m = mainDrop + droplets * r * trailFront;
	    return vec2(m, trail);
	}

	float StaticDrops(vec2 uv, float t) 
	{
	    uv *= 40.;    
	    vec2 id = floor(uv);
	    uv = fract(uv) - 0.5;
	    vec3 n = N13(id.x * 107.45 + id.y * 3543.654);
	    vec2 p = (n.xy - 0.5) * 0.7;
	    float d = length(uv-p);
	    float fade = Saw(0.025, fract(t + n.z));
	    float c = smoothstep(0.3, 0.0, d) * fract(n.z * 10.0) * fade;
	    return c;
	}
	vec2 Drops(vec2 uv, float t, float l0, float l1, float l2) 
	{
	    float s = StaticDrops(uv, t) * l0; 
	    vec2 m1 = dropLayer(uv, t) * l1;
	    vec2 m2 = dropLayer(vec2(0.0), t) * l2;
	    float c = s + m1.x + m2.x;
	    c = smoothstep(.3, 1.0, c);
	    return vec2(c, max(m1.y * l0, m2.y * l1));
	}  
	vec4 RainDrop_main(sampler2D Tex, vec2 UV, float Seed, float Speed) 
	{
	    float T = Seed * Speed;
	    float t = T*.5 * -1.0;
	    float rainAmount =  3.076;
	    float maxBlur = mix(3., 6., rainAmount);
	    float minBlur = 1.216;
	    float staticDrops = smoothstep(-.5, 1., rainAmount)*0.5;
	    float layer1 = smoothstep(.25, .75, rainAmount);
	    float layer2 = smoothstep(.0, .5, rainAmount);
	    vec2 c = Drops(UV, t, staticDrops, layer1, layer2);
	    vec2 e = vec2(.001, 0.);
	    float cx = Drops(UV + e, t, staticDrops, layer1, layer2).x;
	    float cy = Drops(UV + e.yx, t, staticDrops, layer1, layer2).x;
	    vec2 n = vec2(cx - c.x, cy - c.x);
	    float focus = mix(maxBlur - c.y, minBlur, smoothstep(0.0, 0.0, c.x));
	    vec3 col = texture(Tex, UV + n, focus).rgb;
	    float colFade = sin(t*.2)*.5+.5;
	    col *= mix(vec3(1.), vec3(.8, .9, 1.3), 0.0);
	    return vec4(col, texture(Tex, UV).a);
	}


  //下雪
  float rnd(float x) {
      return fract(sin(dot(vec2(x+47.49,38.2467/(x+2.3)), vec2(12.9898, 78.233)))* (43758.5453));
  }

  float drawCircle(vec2 uv, vec2 center, float radius) {
      return 1.0 - smoothstep(0.0, radius, length(uv - center));
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif
    o *= color;

    if(renderType < 0.0){
      return o;
    }else if(renderType < 1.0){
      //睁眼效果
      float Intensity = 3.0;
      float subDis = 0.15 + abs(fract(cc_time.x)-0.5)/10.0;

      float dis = distance(uv0,vec2(0.5,0.5) );
      float grayValue = 0.5 - Intensity*(dis-subDis);
      o *= grayValue; 
    }else if(renderType < 2.0){
      //双眼
      float Seed = 0.5 + abs(fract(cc_time.x)-0.5)/2.;
      vec2 uv = uv0;
      vec4 col = CCSampleWithAlphaSeparated(cc_spriteTexture, uv);
      vec3 color = vec3(0.);
      float radius = 0.5 + cos( Seed ) * .5;
      float gradientLength = abs( sin( Seed * 3. ) * .1 );
      vec2 p =  2. * ( uv ) - 1.;
      p.x *= uSize.x / uSize.y;
      vec2 le = vec2( -.4, 0. );
      vec2 re = vec2(  .4, 0. );
      float d = max(  ( 1.-( distance( p, le ) * radius )  ) ,  ( 1.-( distance( p, re ) * radius )  ) );
      vec3 rgb = mix( color, col.rgb, smoothstep( 0.5, 0.5 + gradientLength, d ) );
      return vec4( rgb, col.a);
    }else if(renderType<3.0){
      //分镜
      o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0*2.0);
    }
   
    ALPHA_TEST(o);
    return o;
  }
}%
